---
title: "Multinomial Logit Example"
---

```{r loading packages etc., include = T, warning=FALSE, message=FALSE, include=FALSE}
options(scipen = 999,digits = 3)

```

# introduction

In this document I'll demonstrate merger simulation with a synthetic example. On the supply side assuming a differentiated Bertrand model and on the demand side assuming a multinomial logit demand function.

The Bertrand system of equations has 4 components:\
(1) Market shares.\
(2) Prices.\
(3) Derivatives of the demand function with respect to the prices.\
(4) Marginal costs of the firms.

# Pre merger conditions

For the sake of demonstration the market shares chosen are `0.2, 0.25` and `0.3`.\
prices are `50, 75` and `80` correspondingly.

```{r, collapse= TRUE}
# 1. market shares
s <- c(0.2, 0.25, 0.3) 

# outside option market share
(s_0 <- 1 - sum(s) )

# 2. prices
p <- c(50, 75, 80)
```

**Calculation of derivatives**\
The logit derivative is a function of market shares and the consumer's derivative with respect to the price - the model's $alpha$. we'll choose $alpha$ to be 0.1. In fact, this is a calibration of the system. One can estimate those parameters with a demand estimation (which is beyond the scope of this simple document).

```{r, collapse= TRUE}
# 3. derivatives
# choose alpha  
alpha <- - 0.1

# derivatives are functions of market shares and alpha
# own derivative
(d_sj_d_pj <- alpha * (1-s) * s)

# cross derivative
(d_sk_d_pj <- - alpha * s %o% s)

# put own derivatives in diagonal
der <- d_sk_d_pj
diag(der) <- d_sj_d_pj

# final result
der
```

Note that the diagonal is negative -\> self elasticity is negative, and the off-diagonal are positive which means products are substitutes.

**Solving the equation system for the marginal costs**\
As stated above, First order condition has 4 components.\
We have supplied the market shares, the prices and the derivatives. Next, we solve the system for the marginal costs.

For the solution we create the "owner ship" matrix:

```{r}
# 4. solving a system of equations for the marginal costs
# ownership matrix
(theta <- matrix( c(1,0,0,0,1,0,0,0,1), nrow = 3))

# solve a system of linear equations
(mc <- solve(theta * der) %*% s + p )
```

We can check the first order condition are valid.

```{r}
# check that F.O.C's are met: 
s + (theta * der) %*% (p - mc)
```

# Merger simulate

**A merger in the market**\
When a merger happens, the ownership of firms over the product set is changing. Next, we'll assume that products 1 and 2 are now under the same ownership. For that, we update the ownership matrix. The 1st and 2nd elements 1st and 2nd rows of the matrix will equal to 1:

```{r}
# new ownership matrix: 
(theta_post <- matrix(c(1,1,0,1,1,0,0,0,1), nrow = 3))
```

Changing the ownership matrix resembles the change in the incentives the merged firm forgo. The firm understands that when the price of product 1 goes up, some of the customers that choose to not buy it anymore will by product 2. The closer substitutes are the products the larger proportion of customers will diverge between product 1 to 2 and vice versa. Hence for those customers, the firm does not loose its sails. With that knowledge, the firm can raise the price up. The first order condition is not valid anymore because the old price is not the optimal price.

```{r}
# FOC don't hold
s + (theta_post * der) %*% (p - mc)
```

## Fixed point iteration

This change in the merged firm incentives has a ripple effect on the entire market. The firm will raise its prices, some of the customers will leave its products and either buy it at the competitors or not buy it at all. To compute this, we need an iterative process that will end in a new equilibrium.

Assuming convexity and continuity of the equation system, we can find a solution and know it is unique.

according to the model , the average utility from product j is: $$ \delta_j = x \beta_j - \alpha p + \xi _j $$\
For each product we calculate the average utility.

A change in price will change the utility from the product. This in turn, will be reflected in the demand function, the demand decreases when the price goes up and vice versa.

```{r}
# delta = x * b - alpha * p
(delta <- log(s / s_0)) 

exp(delta) / (1 + sum(exp(delta)))
```

## Manual iteration

We'll compute the first few iterations be hand to see how it converges.\
In every iteration 4 stages will take place:

(1) Solve the firms first order conditions subject to market shares to find a new price vector.
(2) Calculate the change in the price vector compared to the pre-merger state.
(3) feed the new prices to consumer utility functions to get the change in utilities.
(4) Get the new market shares out from the demand function.

```{r}
# the price update procedure: 
# 1. solve FOC 1
(p1 <- as.vector(mc + (1/ - alpha) * (1 / (1 -  theta_post %*% s))))
# 2. delta price
(d_p <- (p1 - p))
# 3. delta in utility
(d_delta <- d_p * alpha)
# 4. solve demand for new utility
(s1 <- exp(delta + d_delta) / (1 + sum(exp(delta + d_delta))))
```

Get the results and compere to the pre merger status.

```{r}
results <-rbind(c(s, p), c(s1, p1)) 
results
```

Repeat the process several more times.

```{r}
# solve FOC 2:
p2 <- as.vector(mc + (1/ -alpha) * (1/(1 -  theta_post %*% s1)))
d_p <- (p2 - p) 
d_delta <- d_p * alpha
# solve demand 2:
s2 <- exp(delta + d_delta) / (1 + sum(exp( delta + d_delta)))
results <- rbind(results, c(s2, p2))
# solve FOC 3:
p3 <- as.vector(mc + (1/ -alpha) * (1/(1 -  theta_post %*% s2)))
d_p <- (p3 - p) 
d_delta <- d_p * alpha
# solve demand 3:
s3 <- exp(delta + d_delta) / (1 + sum(exp( delta + d_delta)))
results <- rbind(results, c(s3, p3))
# solve FOC 4:
p4 <- as.vector(mc + (1/ -alpha) * (1/(1 -  theta_post %*% s3)))
d_p <- (p4 - p) 
d_delta <- d_p * alpha
# solve demand 3:
s4 <- exp(delta + d_delta) / (1 + sum(exp( delta + d_delta)))
results <- rbind(results, c(s4, p4))
# solve FOC 5:
p5 <- as.vector(mc + (1/ -alpha) * (1/(1 -  theta_post %*% s4)))
d_p <- (p5 - p) 
d_delta <- d_p * alpha
# solve demand 3:
s5 <- exp(delta + d_delta) / (1 + sum(exp( delta + d_delta)))
results <- rbind(results, c(s5, p5))
# solve FOC 6:
p6 <- as.vector(mc + (1/ -alpha) * (1/(1 -  theta_post %*% s5)))
d_p <- (p6 - p) 
d_delta <- d_p * alpha
# solve demand
s6 <- exp(delta + d_delta) / (1 + sum(exp( delta + d_delta)))
results <- rbind(results, c(s6, p6))
# solve FOC 7:
p7 <- as.vector(mc + (1/ -alpha) * (1/(1 -  theta_post %*% s6)))
d_p <- (p7 - p) 
d_delta <- d_p * alpha
# solve demand
s7 <- exp(delta + d_delta) / (1 + sum(exp( delta + d_delta)))
results <- rbind(results, c(s7, p7))
# solve FOC 8:
p8 <- as.vector(mc + (1/ -alpha) * (1/(1 -  theta_post %*% s7)))
d_p <- (p8 - p) 
d_delta <- d_p * alpha
# solve demand
s8 <- exp(delta + d_delta) / (1 + sum(exp( delta + d_delta)))
```

In the `results` matrix, columns 1-3 are market shares and columns 4-6 are the prices.\
every iteration the jumps in the values decreases.

```{r}
results <- rbind(results, c(s8, p8))
colnames(results) <- c('s1', 's2', 's3', 'p1', 'p2', 'p3')
results
```

We can see where it's going. the shares of products 1 and 2 are decreasing and product 3 is increasing. All prices are going up.

Lets calculate the new equilibrium.

## While loop

We'll limit the number of iterations with `max_iter`, and document the convergence process in a `convergence_matrix` .

```{r}
max_iter <- 82 
s_in <- s
i <- 0
s_delta_norm <- 1
convergence_matrix <- matrix(nrow = max_iter, ncol = length(s) * 2 + 2)

while(s_delta_norm > 1e-6 & i < max_iter){
  i <- i + 1
  
  # solve F.O.C
  ( p_new <- as.vector(mc + (1/ - alpha ) * ( 1 / (1 -  theta_post %*% s_in) )))
  
  # change in utility
  d_delta <- (p_new - p) * alpha
  
  # solve demand system
  s_new <- exp(delta + d_delta) / (1 + sum(exp(delta + d_delta)))
  
  # norm of change in market shares
  (s_delta_norm <- sqrt(sum((s_in - s_new) ^ 2)))
  
  # save resault for next iteration
  s_in <- s_new
  
  convergence_matrix[i, ] <- c(s_new,  p_new, s_delta_norm, i)
}

colnames(convergence_matrix) <- c("s1", "s2", "s3", "p1", "p2", "p3", "norm", "iteration")

convergence_matrix
```

Compare the data before the merger with the prediction of the simulation about the merger effect on prices and market shares

```{r}
# attach preconditions with last row without NA's in the matrix
final_resault <- 
  convergence_matrix[tail(which(rowSums(!is.na(convergence_matrix)) > 0), 1),]


rbind(c(results[1,],norm = NA,iteration = 0),final_resault)
```

The market share of the outside option has increased:

```{r}
c(before = s_0, after = 1 - sum(final_resault[1:3]))
```

Present convergence process on a plot

```{r, warning=FALSE}
pacman::p_load(tidyverse, patchwork)

p1 <- data.frame(convergence_matrix) %>%
  select(iteration, p1, p2, p3) %>%
  gather(k = "k", v = "prices", 2:4) %>%
  ggplot(aes(x = iteration, y = prices, color = k)) + geom_line(size = 1.2)

p2 <- data.frame(convergence_matrix) %>%
  select(iteration, s1, s2, s3) %>%
  gather(k = "k", v = "shares", 2:4) %>%
  ggplot(aes(x = iteration, y = shares, color = k)) + geom_line(size =1.2)

p1 / p2
```

First order conditions:

```{r}
s_in + (theta_post*der) %*% (p_new - mc)
```

That's it.

In the next example we'll show a bit more complicated example of [One level Nested logit](4_nested.qmd). Also, the code will be warped up in functions for production.
